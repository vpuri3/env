#!/bin/bash

# PS1
export PS1='[\[\e[0;32m\]$ME\[\e[1;36m\]@$MACHINE\[\e[0m\] \W]:'

# misc scripts
export PATH=$HOME/bin:$PATH

## vars
export email="vedantpuri@gmail.com"
export QSTAT_HEADER="JobId:User:QueuedTime:RunTime:WallTime:State:Location:Nodes"
export TZ="America/New_York"
export EDITOR="vi"

ME=$(whoami)

case `uname` in
Darwin)
    export NTHREADS=$(sysctl -n hw.ncpu)
	MACHINE="MBP"

	#Ensure user-installed binaries take precedence
	export PATH=/usr/local/bin:$PATH

	## homebrew
	export PATH=/usr/local/sbin:$PATH

	# MATLAB
	export MTLB_BIN=/Applications/MATLAB_R2022b.app/bin

	# NEK
	export NEK_WD=$HOME'/Nek5000/run'

    # python
    # export PYTHONPATH=$PYTHONPATH:/usr/local/lib/python3.7/site-packages

	;;
Linux)
	MACHINE=$(hostname)

    # python tooling
	export PATH=$HOME/.local/bin:$PATH

	;;
esac

# X11
if [[ ! -n $DISPLAY ]]; then
    export DISPLAY=:0
fi

## num of CPU cores/ threads
if command -v julia >/dev/null 2>&1; then
    export NCORES=$(julia --startup-file=no -e 'min(Sys.CPU_THREADS, length(Sys.cpu_info())) |> print')
    export NTHREADS=$(julia --startup-file=no -e 'Sys.CPU_THREADS |> print')
    
    # export JULIA_NUM_THREADS=$NTHREADS 
    export JULIA_NUM_PRECOMPILE_TASKS=$NTHREADS
    # export JULIA_NUM_GC_THREADS=$NTHREADS
    # export JULIA_CUDA_MEMORY_POOL=none # when running out of GPU memory
else
    # Fallback to Python or system commands when Julia is not available
    if command -v python3 >/dev/null 2>&1; then
        export NCORES=$(python3 -c 'import psutil; print(psutil.cpu_count(logical=False))' 2>/dev/null || echo "1")
        export NTHREADS=$(python3 -c 'import os; print(os.cpu_count())' 2>/dev/null || echo "1")
    else
        # Final fallback to system-specific commands
        export NCORES=1
        export NTHREADS=1
    fi
fi

#
